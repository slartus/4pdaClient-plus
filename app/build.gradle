apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}


android {
    compileSdkVersion rootProject.compileSdkVersion

    def appVersionCode = 652
    // именование версий:
    // первое число не трогаем никогда. только если весь клиент переписали, но тогда это другой репозиторий
    // второе число только при серьезных изменениях, затрагивающих интерфейс или архитектуру
    // третье число меняется каждый релиз
    // 4 число - ТОЛЬКО фиксы в релизе.
    // новая ветка release - туда попадают только полный новый релиз и только его фиксы
    // после фикса в релизе мержим в мастер.
    // мастер - рабочая ветка для следуюшего релиза

    def appVersionName = "3.5.8.4"

    defaultConfig {
        applicationId 'org.softeg.slartus.forpdaplus'
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.targetSdkVersion
        versionCode appVersionCode
        versionName appVersionName
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    dexOptions {
        dexInProcess = true
        preDexLibraries = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    signingConfigs {
        release {
            def keystoreProperties = new Properties()

            if (rootProject.file("keystore.properties").exists()) {
                keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
                storeFile file("keystore.jks")
                storePassword "$keystoreProperties.RELEASE_STORE_PASSWORD"
                keyAlias "$keystoreProperties.RELEASE_KEY_ALIAS"
                keyPassword "$keystoreProperties.RELEASE_KEY_PASSWORD"
            } else {
                storeFile file("keystore.jks")
                storePassword System.getenv('RELEASE_STORE_PASSWORD')
                keyAlias System.getenv('RELEASE_KEY_ALIAS')
                keyPassword System.getenv('RELEASE_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "wtf"
    productFlavors {
        def defaultSigningVariable = signingConfigs.release
        rel {
            applicationId 'org.softeg.slartus.forpdaplus'
            versionCode appVersionCode
            versionName appVersionName
            signingConfig defaultSigningVariable
            dimension "wtf"
        }
        beta {
            applicationId 'org.softeg.slartus.forpdaplus.beta'
            versionCode 665// у беты свой номер, чтобы не инкрементить релизный
            versionName "${appVersionName}beta" //beta - С МАЛЕНЬКОЙ БУКВЫ ПЛЗ.))
            signingConfig defaultSigningVariable
            dimension "wtf"
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def fileNaming = "ForPDA"
            def vCode = variant.versionCode
            def flavor = variant.productFlavors[0]
            if (variant.buildType.name == "debug")
                outputFileName = "app-debug.apk"
            else if (flavor.name == "beta")
                outputFileName = "${fileNaming}_${appVersionName}-beta_c${vCode}.apk"
            else
                outputFileName = "${fileNaming}_${appVersionName}-${variant.buildType.name}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        disable 'RestrictedApi'
        checkReleaseBuilds false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}
dependencies {
    api project(':forpdacommon')
    api project(':forpdanotifyservice')
    api project(':4pdasources')
    api project(':hosthelper')
    implementation project(':feature:feature-preferences')
    implementation project(':core-ui')
    api 'com.google.android.material:material:1.3.0'
    api 'androidx.appcompat:appcompat:1.2.0'
//    api "com.android.support:preference-v7:$rootProject.supportLibraryVersion"
    api 'androidx.cardview:cardview:1.0.0'
    api 'androidx.recyclerview:recyclerview:1.2.0'
    api 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    api 'com.readystatesoftware.sqliteasset:sqliteassethelper:2.0.1'
    api 'com.github.chrisbanes.photoview:library:1.2.4'
    api 'com.nineoldandroids:library:2.4.0'
    api 'com.afollestad.material-dialogs:core:0.9.6.0'
    api 'de.hdodenhof:circleimageview:3.1.0'
    api 'com.dmitriy-tarasov:android-intents:1.1.0'
    api 'com.squareup.picasso:picasso:2.71828'
    api 'ch.acra:acra:4.9.2'
    api 'com.google.code.gson:gson:2.8.6'
    api "com.squareup.okhttp3:okhttp:$rootProject.okhttp3"
    api 'com.github.armcha:Vertical-Intro:2.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3-native-mt'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.3-native-mt'
    implementation 'io.paperdb:paperdb:2.6'
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxjava2"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.github.pwittchen:reactivenetwork-rx2:3.0.8'
    implementation 'com.karumi:dexter:6.2.2'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    // implementation 'com.gu.android:toolargetool:0.3.0' логирование saveinstancestate
    implementation 'com.evernote:android-job:1.4.2'


    testImplementation 'junit:junit:4.13.2'
    debugImplementation("androidx.fragment:fragment-testing:1.3.6")


    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation('androidx.test:runner:1.4.0')
    androidTestImplementation('androidx.test:rules:1.4.0')

    // Assertions
    androidTestImplementation('androidx.test.ext:junit:1.1.3')
    androidTestImplementation('androidx.test.ext:truth:1.4.0')
    androidTestImplementation('com.google.truth:truth:1.0.1')

    // Espresso dependencies
    // !!WARNING!! espresso 3.4.0 bug!!! - >
    def espressoVersion="3.3.0"
    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-intents:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-accessibility:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-web:$espressoVersion")
    androidTestImplementation("androidx.test.espresso.idling:idling-concurrent:$espressoVersion")

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation("androidx.test.espresso:espresso-idling-resource:$espressoVersion")

}
